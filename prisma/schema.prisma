generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model gym {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description   String?       @db.VarChar(255)
  location      String?       @db.VarChar(255)
  opening_hours String?       @db.VarChar(255)
  closing_hours String?       @db.VarChar(255)
  name          String        @db.VarChar(255)
  created_at    DateTime      @default(now()) @db.Timestamp(6)
  updated_at    DateTime      @default(now()) @db.Timestamp(6)
  user_id       String        @db.Uuid
  tenant_id     String        @db.VarChar(255)
  user          user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  gym_member    gym_member[]
  gym_trainer   gym_trainer[]
}

model gym_member {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  membership_start_date DateTime @db.Timestamp(6)
  membership_end_date   DateTime @db.Timestamp(6)
  user_id               String   @db.Uuid
  gym_id                String   @db.Uuid
  created_at            DateTime @default(now()) @db.Timestamp(6)
  updated_at            DateTime @default(now()) @db.Timestamp(6)
  gym                   gym      @relation(fields: [gym_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                  user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model gym_trainer {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  experience_years Int
  specialization   String            @db.VarChar(255)
  user_id          String            @db.Uuid
  gym_id           String            @db.Uuid
  created_at       DateTime          @default(now()) @db.Timestamp(6)
  updated_at       DateTime          @default(now()) @db.Timestamp(6)
  gym              gym               @relation(fields: [gym_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  training_course  training_course[]
}

model nutritionist {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  experience_years Int
  specialization   String   @db.VarChar(255)
  user_id          String   @db.Uuid
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  user             user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model training_course {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  course_name     String      @db.VarChar(255)
  course_duration Int
  course_fee      Int
  trainer_id      String      @db.Uuid
  created_at      DateTime    @default(now()) @db.Timestamp(6)
  updated_at      DateTime    @default(now()) @db.Timestamp(6)
  gym_trainer     gym_trainer @relation(fields: [trainer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  gym          gym[]
  gym_member   gym_member[]
  gym_trainer  gym_trainer[]
  nutritionist nutritionist[]
}
